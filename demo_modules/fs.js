// рассмотрим встроенный в NodeJS модуль fs - File System
// импортируем модуль fs для работы с файловой системой
const fs = require('fs');

// испортируем модуль path для работы с путями
const path = require('path');

// например, мы можем создать директорию
// нужно обратить внимание на то, что вторым параметром mkdir
// принимает коллбэк, а тот в свою очередь должен следовать
// "error-first" подходу к коллбэкам в NodeJS и сразу проверить ошибку
// fs.mkdir(path.join(__dirname, '/hey'), (err) => {
//     if (err) {
//         throw err;
//     }
//
//     console.log('Directory created!');
// });

// можем создавать файлы
// для этого нужно сначала создать путь к файлу
const filePath = path.join(__dirname, 'hey', 'text.txt');
// затем воспользоваться методом writeFile
// ВАЖНО! Все директории, которые используются при записи в файл,
// должны существовать! Если нет, то можно использовать fs.mkdir
// writeFile в отличии от mkdir может повторно вызываться
// с теми же аргументами - он полностью перезаписывает контент
// fs.writeFile(filePath, 'Some super sexy content!', err => {
//     if (err) {
//         throw err;
//     }
//
//     console.log('File created!');
// });

// если мы хотим добавлять (а не перезаписывать) содержимое,
// то можем использовать appendFile
// fs.appendFile(filePath, '\nSome other content', err => {
//     if (err) {
//         throw err;
//     }
//
//     console.log('Content appended!');
// });

// кроме записи мы также можем читать файлы (результат в байтах)
// ВАЖНО! Если мы хотим сразу декодировать в строку, то тогда 2-ым параметром
// передаём кодировку в формате строки ('utf-8'), а коллбэк - 3-им параметром
fs.readFile(filePath, (err, content) => {
    if (err) {
        throw err;
    }

    // результат (content) в байтах
    console.log(content);

    // если мы хотим получить результат в более понятном для человека виде,
    // то можно использовать метод from объекта Buffer, который позволяет из
    // массива байт получить буфер, который в свою очередь можно декодировать
    // в привычную строку (по умолчанию кодировка UTF-8)
    const data = Buffer.from(content);
    console.log(data.toString());
});